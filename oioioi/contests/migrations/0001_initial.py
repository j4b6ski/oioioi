# -*- coding: utf-8 -*-
# Generated by Django 1.9.13 on 2018-08-16 19:12
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import oioioi.base.fields
import oioioi.base.utils.validators
import oioioi.contests.fields
import oioioi.contests.models
import oioioi.filetracker.fields
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(re.compile(b'^[a-z0-9_-]+$'), "Enter a valid 'slug' consisting of lowercase letters, numbers, underscores or hyphens.", b'invalid')], verbose_name='ID')),
                ('name', models.CharField(max_length=255, validators=[oioioi.base.utils.validators.validate_whitespaces], verbose_name='full name')),
                ('controller_name', oioioi.base.fields.DottedNameField(choices=[(b'dummy', b'Dummy')], superclass=b'oioioi.contests.controllers.ContestController', verbose_name='type')),
                ('creation_date', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='creation date')),
                ('default_submissions_limit', models.IntegerField(blank=True, default=10, verbose_name='default submissions limit')),
                ('contact_email', models.EmailField(blank=True, help_text='Address of contest owners. Sent emails related to this contest (i.e. submission confirmations) will have the return address set to this value. Defaults to system admins address if left empty.', max_length=254, verbose_name='contact email')),
                ('judging_priority', models.IntegerField(default=10, help_text='Contest with higher judging priority is always judged before contest with lower judging priority.', verbose_name='judging priority')),
                ('judging_weight', models.IntegerField(default=1000, help_text='If some contests have the same judging priority, the judging resources are allocated proportionally to their weights.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='judging weight')),
            ],
            options={
                'get_latest_by': 'creation_date',
                'verbose_name': 'contest',
                'verbose_name_plural': 'contests',
                'permissions': (('contest_admin', 'Can administer the contest'), ('contest_observer', 'Can observe the contest'), ('enter_contest', 'Can enter the contest'), ('personal_data', 'Has access to the private data of users')),
            },
        ),
        migrations.CreateModel(
            name='ContestAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255, verbose_name='description')),
                ('content', oioioi.filetracker.fields.FileField(max_length=255, upload_to=oioioi.contests.models.make_contest_filename, verbose_name='content')),
                ('pub_date', models.DateTimeField(blank=True, default=None, null=True, verbose_name='publication date')),
            ],
            options={
                'verbose_name': 'attachment',
                'verbose_name_plural': 'attachments',
            },
        ),
        migrations.CreateModel(
            name='ContestLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255, verbose_name='description')),
                ('url', models.URLField(verbose_name='url')),
                ('order', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'contest menu link',
                'verbose_name_plural': 'contest menu links',
            },
        ),
        migrations.CreateModel(
            name='ContestPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', oioioi.base.fields.EnumField(default=b'contests.contest_admin', max_length=64, verbose_name='permission')),
            ],
            options={
                'verbose_name': 'contest permission',
                'verbose_name_plural': 'contest permissions',
            },
        ),
        migrations.CreateModel(
            name='ContestView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last view')),
            ],
            options={
                'ordering': ('-timestamp',),
                'get_latest_by': 'timestamp',
            },
        ),
        migrations.CreateModel(
            name='FailureReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('json_environ', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ProblemInstance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(re.compile(b'^[a-z0-9_-]+$'), "Enter a valid 'slug' consisting of lowercase letters, numbers, underscores or hyphens.", b'invalid')], verbose_name='short name')),
                ('submissions_limit', models.IntegerField(default=10, verbose_name='submissions limit')),
                ('needs_rejudge', models.BooleanField(default=False, verbose_name='needs rejudge')),
                ('contest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contests.Contest', verbose_name='contest')),
            ],
            options={
                'ordering': ('round', 'short_name'),
                'verbose_name': 'problem instance',
                'verbose_name_plural': 'problem instances',
            },
        ),
        migrations.CreateModel(
            name='ProblemStatementConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', oioioi.base.fields.EnumField(default=b'AUTO', help_text='If set to Auto, the visibility is determined according to the type of the contest.', max_length=64, verbose_name='statements visibility')),
                ('contest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='contests.Contest')),
            ],
            options={
                'verbose_name': 'problem statement config',
                'verbose_name_plural': 'problem statement configs',
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, validators=[oioioi.base.utils.validators.validate_whitespaces], verbose_name='name')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='start date')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='end date')),
                ('results_date', models.DateTimeField(blank=True, null=True, verbose_name='results date')),
                ('public_results_date', models.DateTimeField(blank=True, help_text="Participants may learn about others' results, what exactly happens depends on the type of the contest (eg. rankings, contestants' solutions are published).", null=True, verbose_name='public results date')),
                ('can_submit_after_end', models.BooleanField(default=False, verbose_name=b'accept submissions after the round ends')),
                ('is_trial', models.BooleanField(default=False, verbose_name='is trial')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.Contest', verbose_name='contest')),
            ],
            options={
                'ordering': ('contest', 'start_date'),
                'verbose_name': 'round',
                'verbose_name_plural': 'rounds',
            },
        ),
        migrations.CreateModel(
            name='RoundTimeExtension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra_time', models.PositiveIntegerField(verbose_name='Extra time (in minutes)')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.Round')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'round time extension',
                'verbose_name_plural': 'round time extensions',
            },
        ),
        migrations.CreateModel(
            name='ScoreReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', oioioi.base.fields.EnumField(blank=True, max_length=64, null=True)),
                ('score', oioioi.contests.fields.ScoreField(blank=True, max_length=255, null=True)),
                ('max_score', oioioi.contests.fields.ScoreField(blank=True, max_length=255, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, verbose_name='date')),
                ('kind', oioioi.base.fields.EnumField(default=b'NORMAL', max_length=64, verbose_name='kind')),
                ('score', oioioi.contests.fields.ScoreField(blank=True, max_length=255, null=True, verbose_name='score')),
                ('status', oioioi.base.fields.EnumField(default=b'?', max_length=64, verbose_name='status')),
                ('comment', models.TextField(blank=True, verbose_name='comment')),
                ('problem_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ProblemInstance', verbose_name='problem')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'get_latest_by': 'date',
                'verbose_name': 'submission',
                'verbose_name_plural': 'submissions',
            },
        ),
        migrations.CreateModel(
            name='SubmissionReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('kind', oioioi.base.fields.EnumField(default=b'FINAL', max_length=64)),
                ('status', oioioi.base.fields.EnumField(default=b'INACTIVE', max_length=64)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.Submission')),
            ],
            options={
                'ordering': ('-creation_date',),
                'get_latest_by': 'creation_date',
            },
        ),
        migrations.CreateModel(
            name='UserResultForContest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', oioioi.contests.fields.ScoreField(blank=True, max_length=255, null=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.Contest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserResultForProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', oioioi.contests.fields.ScoreField(blank=True, max_length=255, null=True)),
                ('status', oioioi.base.fields.EnumField(blank=True, max_length=64, null=True)),
                ('problem_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ProblemInstance')),
                ('submission_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contests.SubmissionReport')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserResultForRound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', oioioi.contests.fields.ScoreField(blank=True, max_length=255, null=True)),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.Round')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='scorereport',
            name='submission_report',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.SubmissionReport'),
        ),
    ]
